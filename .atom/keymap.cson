# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# '.editor':
#   'enter': 'editor:newline'
#
# '.workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/customizing-atom#customizing-key-bindings
# * https://atom.io/docs/latest/advanced/keymaps

'body':
  'ctrl-f v': 'pane:split-right'
  'ctrl-f s': 'pane:split-down'

# work around missing window pane bindings in vim-mode
'.vim-mode.command-mode:not(.mini)':
  'ctrl-f h': 'window:focus-pane-on-left'
  'ctrl-f left': 'window:focus-pane-on-left'
  'ctrl-f j': 'window:focus-pane-below'
  'ctrl-f down': 'window:focus-pane-below'
  'ctrl-f k': 'window:focus-pane-above'
  'ctrl-f up': 'window:focus-pane-above'
  'ctrl-f l': 'window:focus-pane-on-right'
  'ctrl-f right': 'window:focus-pane-on-right'
  'ctrl-f o': 'window:focus-next-pane'
  'ctrl-f ctrl-o': 'window:focus-previous-pane'
  'ctrl-f x': 'pane:close'
  'ctrl-f q': 'core:close'

# Remap escape for vim
'.editor.vim-mode:not(.command-mode)':
  'j k': 'vim-mode:activate-command-mode'
#'.editor.vim-mode.insert-mode':
#  'j': 'insert-incomplete-keybinding'

# Autocomplete Plus
'.autocomplete-plus input.hidden-input':
    'enter': 'autocomplete-plus:confirm'
